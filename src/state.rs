pub trait State {
    fn is_final(&self) -> bool;
}

Accept!(AndAcc);
Accept!(AssignAcc);
Accept!(GtAcc);
Accept!(BinaryAcc);
Accept!(ExclusiveOrAcc);
Accept!(ColonAcc);
Accept!(CommaAcc);
Accept!(SlashAcc);
Accept!(DecimalAcc);
Accept!(DecimalDigitsAcc);
Accept!(DecimalExponentAcc);
Accept!(DecimalExponentSignedAcc);
Accept!(DotPart);
Accept!(String);
Accept!(ExclamationAcc);
Accept!(HELL);
Accept!(HexAcc);
Accept!(Identifier);
Accept!(Indentifier);
Accept!(LBraceAcc);
Accept!(LtAcc);
Accept!(LineTerminator);
Accept!(LParenAcc);
Accept!(LBracketAcc);
Accept!(MinusAcc);
Accept!(MultiLineCommentAcc);
Accept!(OctalAcc);
Accept!(OrAcc);
Accept!(ModAcc);
Accept!(PlusAcc);
Accept!(QuestionMarkAcc);
Accept!(RBraceAcc);
Accept!(RBracketAcc);
Accept!(RParenAcc);
Accept!(SemicolonAcc);
Accept!(SingleLineCommentAcc);
Accept!(Char);
Accept!(MultiAcc);
Accept!(TildeAcc);
Accept!(WhiteSpace);

State!(Tilde);
State!(Semicolon);
State!(And);
State!(Assign);
State!(Gt);
State!(Binary);
State!(ExclusiveOr);
State!(Colon);
State!(Comma);
State!(Slash);
State!(LParen);
State!(RParen);
State!(LBrace);
State!(RBrace);
State!(LBracket);
State!(RBracket);
State!(Decimal);
State!(DecimalDigits);
State!(DecimalExponent);
State!(DecimalExponentSigned);
State!(Exclamation);
State!(Hex);
State!(InputElementDiv);
State!(Lt);
State!(Minus);
State!(MultiLineComment);
State!(MultiLineCommentStar);
State!(Octal);
State!(Or);
State!(Mod);
State!(QuestionMark);
State!(Plus);
State!(SawZero);
State!(SingleLineComment);
State!(Multi);